/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import vista.productoDAO;


import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vista.Producto;
import vista.ConexionSQlServe;
import vista.Producto;



/**
 *
 * @author Jhair
 */
public class nuevaVenta extends javax.swing.JPanel {

    /**
     * Creates new form nuevaVenta
     */
    public nuevaVenta() {
          initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ID_producto = new javax.swing.JTextField();
        txtDescripcionVenta = new javax.swing.JTextField();
        txtCantidadVenta = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        txtStockDisponible = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableVenta = new javax.swing.JTable();
        btnEliminarventa = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtRFC = new javax.swing.JTextField();
        btnGenerarVenta = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        Midate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        txtNombreCliente = new javax.swing.JTextField();
        TotalPagar = new javax.swing.JTextField();
        Lista_Productos = new javax.swing.JComboBox<>();
        LIMPIAR_TODO = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("ID_producto");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Descripción");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Cant");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Precio");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("Stock Disponible");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        ID_producto.setBackground(new java.awt.Color(204, 204, 204));
        ID_producto.setBorder(null);
        ID_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_productoActionPerformed(evt);
            }
        });
        ID_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ID_productoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ID_productoKeyTyped(evt);
            }
        });
        jPanel2.add(ID_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 102, 30));

        txtDescripcionVenta.setBackground(new java.awt.Color(204, 204, 204));
        txtDescripcionVenta.setBorder(null);
        txtDescripcionVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionVentaActionPerformed(evt);
            }
        });
        txtDescripcionVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescripcionVentaKeyTyped(evt);
            }
        });
        jPanel2.add(txtDescripcionVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 191, 30));

        txtCantidadVenta.setBackground(new java.awt.Color(204, 204, 204));
        txtCantidadVenta.setBorder(null);
        txtCantidadVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadVentaActionPerformed(evt);
            }
        });
        txtCantidadVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadVentaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadVentaKeyTyped(evt);
            }
        });
        jPanel2.add(txtCantidadVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 70, 40, 30));

        txtPrecioVenta.setEditable(false);
        txtPrecioVenta.setBackground(new java.awt.Color(204, 204, 204));
        txtPrecioVenta.setBorder(null);
        txtPrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioVentaActionPerformed(evt);
            }
        });
        jPanel2.add(txtPrecioVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 70, 80, 30));

        txtStockDisponible.setEditable(false);
        txtStockDisponible.setBackground(new java.awt.Color(204, 204, 204));
        txtStockDisponible.setBorder(null);
        txtStockDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockDisponibleActionPerformed(evt);
            }
        });
        jPanel2.add(txtStockDisponible, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 79, 30));

        TableVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_productos", "DESCRIPCIÓN", "CANTIDAD", "PRECIO U.", "PRECIO TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableVenta);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 843, 191));

        btnEliminarventa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar.png"))); // NOI18N
        btnEliminarventa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarventaActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminarventa, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 110, -1, 40));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("RFC");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Nombre:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 352, -1, -1));

        txtRFC.setBackground(new java.awt.Color(204, 204, 204));
        txtRFC.setBorder(null);
        txtRFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRFCActionPerformed(evt);
            }
        });
        txtRFC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRFCKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRFCKeyTyped(evt);
            }
        });
        jPanel2.add(txtRFC, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 116, 30));

        btnGenerarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/print.png"))); // NOI18N
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });
        jPanel2.add(btnGenerarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(453, 373, -1, 45));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/money.png"))); // NOI18N
        jLabel10.setText("Total a Pagar:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 377, -1, -1));

        btnAgregar.setBackground(new java.awt.Color(255, 255, 255));
        btnAgregar.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(51, 255, 0));
        btnAgregar.setText("+");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 60, -1, -1));

        Midate.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.add(Midate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 70, 120, 30));

        jLabel11.setText("Seleccionar:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, -1, -1));

        jPanel14.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, 2));

        jPanel19.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, -1, 2));

        jPanel20.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 190, 2));

        jPanel21.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 40, 2));

        jPanel22.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, 80, 2));

        jPanel23.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 85, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 85, 2));

        jPanel24.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 405, 120, 2));

        jPanel25.setBackground(new java.awt.Color(0, 110, 255));

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 405, 160, 2));

        txtNombreCliente.setBackground(new java.awt.Color(255, 255, 255));
        txtNombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreClienteActionPerformed(evt);
            }
        });
        jPanel2.add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 160, -1));

        TotalPagar.setBackground(new java.awt.Color(255, 255, 255));
        TotalPagar.setForeground(new java.awt.Color(51, 255, 0));
        TotalPagar.setText("- - - - ");
        TotalPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalPagarActionPerformed(evt);
            }
        });
        jPanel2.add(TotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 380, 90, -1));

        Lista_Productos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mostrar" }));
        Lista_Productos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista_ProductosActionPerformed(evt);
            }
        });
        jPanel2.add(Lista_Productos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 120, -1));

        LIMPIAR_TODO.setBackground(new java.awt.Color(51, 255, 0));
        LIMPIAR_TODO.setForeground(new java.awt.Color(255, 255, 255));
        LIMPIAR_TODO.setText("FINALIZAR");
        LIMPIAR_TODO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIMPIAR_TODOActionPerformed(evt);
            }
        });
        jPanel2.add(LIMPIAR_TODO, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 110, 90, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 858, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void ID_productoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ID_productoKeyPressed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_ID_productoKeyPressed

    private void ID_productoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ID_productoKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ID_productoKeyTyped

    private void txtDescripcionVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionVentaKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtDescripcionVentaKeyTyped

    private void txtCantidadVentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadVentaKeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtCantidadVentaKeyPressed
    
    
    private ArrayList<String> obtenerNombresProductos(Connection conexion) throws SQLException {
    ArrayList<String> nombresProductos = new ArrayList<>();

    String sql = "SELECT Nombre FROM Productos";
    try (PreparedStatement statement = conexion.prepareStatement(sql);
         ResultSet resultSet = statement.executeQuery()) {

        while (resultSet.next()) {
            String nombreProducto = resultSet.getString("Nombre");
            nombresProductos.add(nombreProducto);
        }
    }

    return nombresProductos;
}
    
    
    private void txtCantidadVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadVentaKeyTyped
        // TODO add your handling code here:
      
    }//GEN-LAST:event_txtCantidadVentaKeyTyped

    private void btnEliminarventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarventaActionPerformed
    int filaSeleccionada = TableVenta.getSelectedRow();

    // Verificar si hay una fila seleccionada
    if (filaSeleccionada != -1) {
        // Eliminar la fila seleccionada
        DefaultTableModel modelo = (DefaultTableModel) TableVenta.getModel();
        modelo.removeRow(filaSeleccionada);

        // Actualizar el total a pagar después de eliminar la fila
        actualizarTotalAPagar();
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }



    }//GEN-LAST:event_btnEliminarventaActionPerformed

    private void txtRFCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFCKeyPressed
        // TODO add your handling code here:
      
        
    }//GEN-LAST:event_txtRFCKeyPressed

    private void txtRFCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFCKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRFCKeyTyped

    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed
        // Obtener el modelo de la tabla
DefaultTableModel modeloTabla = (DefaultTableModel) TableVenta.getModel();

// Verificar si hay filas en la tabla
int filas = modeloTabla.getRowCount();

// Crear un mensaje con la información de los datos en la tabla
StringBuilder mensajeDatosTabla = new StringBuilder("Datos en la tabla:\n");

// Obtener la cantidad de columnas en la tabla
int columnas = TableVenta.getColumnCount();

for (int i = 0; i < filas; i++) {
    for (int j = 0; j < columnas; j++) {
        Object valorCelda = TableVenta.getValueAt(i, j);
        // Asumiendo que la primera columna contiene algún identificador único
        if (j == 0) {
            mensajeDatosTabla.append("ID: ");
        }
        mensajeDatosTabla.append(TableVenta.getColumnName(j)).append(": ").append(valorCelda).append("  ");
    }
    mensajeDatosTabla.append("\n");
}

// Imprimir datos de la tabla
System.out.println(mensajeDatosTabla.toString());

// Obtener datos de txtRFC, txtNombreCliente y TotalPagar
String rfc = txtRFC.getText();
String nombreCliente = txtNombreCliente.getText();
String totalPagar = TotalPagar.getText();

// Imprimir datos de txtRFC, txtNombreCliente y TotalPagar
System.out.println("RFC: " + rfc);
System.out.println("Nombre: " + nombreCliente);
System.out.println("Total a pagar: " + totalPagar);

// Mostrar un mensaje de confirmación
int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea finalizar la compra?\n\n" + mensajeDatosTabla.toString(), "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

// Verificar la respuesta del usuario
if (confirmacion == JOptionPane.YES_OPTION) {
    // Limpiar todos los datos del modelo
    modeloTabla.setRowCount(0);

    // Reiniciar el campo TotalPagar
    TotalPagar.setText("- - - -");

    // Limpiar otros campos
    txtRFC.setText("");
    txtNombreCliente.setText("");

    // Actualizar la interfaz gráfica
    TableVenta.updateUI();

    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Compra finalizada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
} else {
    // No hay datos en la tabla
    JOptionPane.showMessageDialog(this, "No hay datos en la tabla.", "Información", JOptionPane.INFORMATION_MESSAGE);
}
}

private double calcularIVA() {
    // Lógica para calcular el IVA
    // Retorna el monto del IVA
    return 0.0; // Cambia esto con la lógica real de cálculo del IVA
}

private String crearFactura(String nombresColumnas, String datosTabla, String ruc, String nombreCliente, double iva, double totalAPagarConIVA) {
    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd-MM-yyyy");
    String fechaActual = formatoFecha.format(new Date());

    int longitudLinea = 45; // Longitud total de la línea para centrar

    StringBuilder facturaBuilder = new StringBuilder();
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append("************** Factura ******************\n");
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append("Fecha: ").append(centrarTexto(fechaActual, longitudLinea)).append("\n");
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append("- - - Datos Cliente - - -\n");
    facturaBuilder.append("Nombre: ").append(centrarTexto(nombreCliente, longitudLinea)).append("\n");
    facturaBuilder.append("RFC: ").append(centrarTexto(ruc, longitudLinea)).append("\n");
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append("- - - Detalle de la compra - - - \n");
    facturaBuilder.append(nombresColumnas); // Agrega los nombres de las columnas sin centrar
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append(datosTabla);
    facturaBuilder.append("*****************************************\n");
    facturaBuilder.append("Total a pagar: ").append(centrarTexto(String.valueOf(calcularTotalAPagar()), longitudLinea)).append("\n");
    facturaBuilder.append("IVA: ").append(centrarTexto(String.valueOf(iva), longitudLinea)).append("\n");
    facturaBuilder.append("Total a pagar con IVA: ").append(centrarTexto(String.valueOf(totalAPagarConIVA), longitudLinea)).append("\n");
    facturaBuilder.append("*****************************************\n");

    return facturaBuilder.toString();
}

private String centrarTexto(String texto, int longitudLinea) {
    int espacios = (longitudLinea - texto.length()) / 2;
    return " ".repeat(Math.max(0, espacios)) + texto + " ".repeat(Math.max(0, espacios));
}

private boolean guardarFacturaEnArchivo(String factura) {
    try {
        String rutaProyecto = System.getProperty("user.dir");
        String nombreArchivo = obtenerNombreFactura();
        String rutaCompleta = rutaProyecto + "\\src\\facturas\\" + nombreArchivo + ".txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaCompleta))) {
            writer.write(factura);
            System.out.println("Factura guardada correctamente en el archivo " + rutaCompleta);
            return true;
        }
    } catch (IOException e) {
        System.err.println("Error al guardar la factura en el archivo: " + e.getMessage());
        return false;
    }
    }

    private String obtenerNombreFactura() {
        int cantidadFacturas = new File(System.getProperty("user.dir") + "\\src\\facturas").listFiles().length;
        return "factura" + String.format("%02d", cantidadFacturas + 1);
    }

    private double calcularTotalConIVA(double iva) {
        DefaultTableModel modelo = (DefaultTableModel) TableVenta.getModel();
        double total = 0.0;

        for (int i = 0; i < modelo.getRowCount(); i++) {
            total += Double.parseDouble(modelo.getValueAt(i, 4).toString());
        }

        return total + iva;
    

    }//GEN-LAST:event_btnGenerarVentaActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
       String codigo = ID_producto.getText();
    String descripcion = txtDescripcionVenta.getText();

    // Verificar si el campo txtCantidadVenta es un número válido
    try {
        int cantidad = Integer.parseInt(txtCantidadVenta.getText());

        // Obtener el precio del campo txtPrecioVenta, si está vacío, establecerlo en 0
        double precio = 0;
        if (!txtPrecioVenta.getText().isEmpty()) {
            precio = Double.parseDouble(txtPrecioVenta.getText());
        }

        // Calcular el precio total
        double precioTotal = cantidad * precio;

        // Agregar los datos a la tabla
        DefaultTableModel modelo = (DefaultTableModel) TableVenta.getModel();
        modelo.addRow(new Object[]{codigo, descripcion, cantidad, precio, precioTotal});

        // Limpiar los campos después de agregar a la tabla
        limpiarCampos();

        // Actualizar y mostrar el total a pagar
        actualizarTotalAPagar();
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void actualizarTotalAPagar() {
    // Calcular el total a pagar en función de los datos en la tabla
    double totalAPagar = calcularTotalAPagar();

    // Mostrar el total a pagar en el componente TotalPagar
    TotalPagar.setText( "$" + String.valueOf(totalAPagar));
}

private double calcularTotalAPagar() {
    DefaultTableModel modelo = (DefaultTableModel) TableVenta.getModel();
    double total = 0.0;

    for (int i = 0; i < modelo.getRowCount(); i++) {
        total += Double.parseDouble(modelo.getValueAt(i, 4).toString());
    }

    return total;

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void ID_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_productoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ID_productoActionPerformed

    private void txtPrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioVentaActionPerformed

    private void txtDescripcionVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionVentaActionPerformed

    private void txtCantidadVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadVentaActionPerformed

    private void txtRFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRFCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRFCActionPerformed

    private void txtNombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreClienteActionPerformed

    public void actionPerformed(java.awt.event.ActionEvent evt) {
       
        } 
    
   
    
    private void txtStockDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockDisponibleActionPerformed

    }//GEN-LAST:event_txtStockDisponibleActionPerformed

    private void Lista_ProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista_ProductosActionPerformed
 try {
    // Establecer la conexión a la base de datos
    Connection conexion = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=GrupoModelo","usersql", "root");

    // Obtener la lista de nombres de productos desde el productoDAO
    List<String> nombresProductos = productoDAO.obtenerNombresProductos();

    // Verificar si la lista de productos no está vacía
    if (!nombresProductos.isEmpty()) {
        // Actualizar el modelo del JComboBox con los nombres de productos
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(nombresProductos.toArray(new String[0]));
        Lista_Productos.setModel(model);

        // Agregar un listener para manejar el evento de cambio en el JComboBox
        Lista_Productos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener el índice del producto seleccionado en el JComboBox
                int indiceSeleccionado = Lista_Productos.getSelectedIndex();

                // Verificar si se seleccionó un ítem válido
                if (indiceSeleccionado >= 0 && indiceSeleccionado < nombresProductos.size()) {
                    // Obtener el nombre del producto seleccionado
                    String nombreProductoSeleccionado = nombresProductos.get(indiceSeleccionado);

                    try {
                        // Obtener el producto completo desde la base de datos usando el nombre
                        Producto productoSeleccionado = productoDAO.obtenerProductoPorNombre(nombreProductoSeleccionado);

                        // Autocompletar los campos con los datos del producto
                        ID_producto.setText(String.valueOf(productoSeleccionado.getIdProducto()));
                        txtDescripcionVenta.setText(productoSeleccionado.getDescripcion());
                        txtPrecioVenta.setText(String.valueOf(productoSeleccionado.getPrecio()));
                        txtStockDisponible.setText(String.valueOf(productoSeleccionado.getCantidadStock()));
                    } catch (SQLException ex) {
                        // Manejar la excepción específica (puedes mostrar un mensaje de error, registrar, etc.)
                        ex.printStackTrace();
                    }
                } else {
                    System.out.println("No se seleccionó un producto válido.");
                }
            }
        });
    } else {
        System.out.println("No se encontraron productos."); 

        // Si deseas mostrar todos los productos al cargar, puedes eliminar el ActionListener y obtener la información del primer producto.
        // Aquí hay un ejemplo de cómo hacerlo:
        // Si la lista de productos no está vacía, obtener el primer nombre de producto
        if (!nombresProductos.isEmpty()) {
            String primerNombreProducto = nombresProductos.get(0);

            // Obtener el producto completo desde la base de datos usando el nombre
            Producto primerProducto = productoDAO.obtenerProductoPorNombre(primerNombreProducto);

            // Autocompletar los campos con los datos del primer producto
            ID_producto.setText(String.valueOf(primerProducto.getIdProducto()));
            txtDescripcionVenta.setText(primerProducto.getDescripcion());
            txtPrecioVenta.setText(String.valueOf(primerProducto.getPrecio()));
            txtStockDisponible.setText(String.valueOf(primerProducto.getCantidadStock()));
        }
    }

    // Cerrar la conexión
    conexion.close();
} catch (SQLException ex) {
    // Manejar la excepción específica (puedes mostrar un mensaje de error, registrar, etc.)
    ex.printStackTrace();
} catch (Exception ex) {
    // Manejar otras excepciones no previstas (si las hay)
    ex.printStackTrace();
}
    }//GEN-LAST:event_Lista_ProductosActionPerformed

    private void LIMPIAR_TODOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIMPIAR_TODOActionPerformed
      // Obtener el modelo de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) TableVenta.getModel();

    // Verificar si hay filas en la tabla
    int filas = modeloTabla.getRowCount();

    if (filas > 0) {
        // Limpiar campos que se seleccionaron
        txtNombreCliente.setText("");
        txtRFC.setText("");

        // Obtener el total a pagar
        double totalPagar = calcularTotal(modeloTabla);

        // Mostrar un mensaje con la información de la compra
        StringBuilder mensajeCompra = new StringBuilder("Detalles de la compra:\n");
        mensajeCompra.append("Nombre: ").append(txtNombreCliente.getText()).append("\n");
        mensajeCompra.append("RFC: ").append(txtRFC.getText()).append("\n\n");
        mensajeCompra.append("Detalles de la compra:\n");

        // Obtener la cantidad de columnas en la tabla
        int columnas = TableVenta.getColumnCount();

        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                Object valorCelda = modeloTabla.getValueAt(i, j);
                mensajeCompra.append(TableVenta.getColumnName(j)).append(": ").append(valorCelda).append("  ");
            }
            mensajeCompra.append("\n");
        }

        // Mostrar el total a pagar
        mensajeCompra.append("\nTotal a pagar: ").append(totalPagar);

        // Mostrar opciones de ver más, aceptar o cancelar
        Object[] opciones = {"Ver más", "Aceptar", "Cancelar"};
        int seleccion = JOptionPane.showOptionDialog(this, mensajeCompra.toString(), "Confirmación de compra", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opciones, opciones[0]);

        // Realizar acciones según la opción seleccionada
        switch (seleccion) {
            case 0:
                // Opción "Ver más" - Mostrar una lista de todo lo que se compró y su costo
                mostrarDetallesCompra(modeloTabla);
                break;
            case 1:
                // Opción "Aceptar" - Limpiar datos y mostrar mensaje de éxito
                limpiarDatos(modeloTabla);
                break;
            default:
                // Opción "Cancelar" - No hacer nada
                break;
        }
    } else {
        // No hay datos en la tabla
        JOptionPane.showMessageDialog(this, "No hay datos en la tabla.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }
}

// Método para calcular el total a pagar
private double calcularTotal(DefaultTableModel modeloTabla) {
    int filas = modeloTabla.getRowCount();
    double total = 0;

    for (int i = 0; i < filas; i++) {
        // Asumiendo que la columna 4 contiene el costo del producto
        total += Double.parseDouble(modeloTabla.getValueAt(i, 4).toString());
    }

    return total;
}

// Método para mostrar detalles de la compra
private void mostrarDetallesCompra(DefaultTableModel modeloTabla) {
    // Mostrar una lista de todo lo que se compró y su costo
    // (Puedes implementar esta parte según tus necesidades)
    // Puedes usar un nuevo JOptionPane, una ventana emergente, o cualquier otro enfoque.
}

// Método para limpiar datos después de aceptar la compra
private void limpiarDatos(DefaultTableModel modeloTabla) {
    // Limpiar todos los datos del modelo
    modeloTabla.setRowCount(0);

    // Reiniciar el campo TotalPagar
    TotalPagar.setText("- - - -");

    // Limpiar otros campos
    txtRFC.setText("");
    txtNombreCliente.setText("");

    // Actualizar la interfaz gráfica
    TableVenta.updateUI();

    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Compra finalizada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_LIMPIAR_TODOActionPerformed

    private void TotalPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TotalPagarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ID_producto;
    private javax.swing.JButton LIMPIAR_TODO;
    private javax.swing.JComboBox<String> Lista_Productos;
    private com.toedter.calendar.JDateChooser Midate;
    private javax.swing.JTable TableVenta;
    private javax.swing.JTextField TotalPagar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminarventa;
    private javax.swing.JButton btnGenerarVenta;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCantidadVenta;
    private javax.swing.JTextField txtDescripcionVenta;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtPrecioVenta;
    private javax.swing.JTextField txtRFC;
    private javax.swing.JTextField txtStockDisponible;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        ID_producto.setText("");
        txtDescripcionVenta.setText("");
        txtCantidadVenta.setText("");
        txtRFC.setText("");
        txtNombreCliente.setText("");
    }

 
  
}


    

    

   
  
    
 
    

